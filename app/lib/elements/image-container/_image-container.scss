// Image Container
//
// Es un contenedor unificado para mostrar imagenes de producto a través del sitio.
// El componente de imagen de producto se pueden usar en los elementos `<a>`,
// en elementos block (como por ejemplo: `<div>`).
// > ### Características del componente **Imagen de producto**
// * **Líquido:** El componente es líquido; esto quiere decir que no tiene ancho
// fijo y va a tomar el de su contenedor. Esto está hecho así a propósito de manera
// que se pueda usar este componente tanto para **galerías**, como para **thumbnails**,
// como para **cajas de producto**.
// * **Best-fit automático:** El componente adaptará por si sólo el tamaño de la
// imagen contenida al mejor posible manteniendo relación de ancho/alto (sin alterar
// las proporciones de la misma). El componente sin embargo no forzará a la imágen
// más allá de sus dimensiones máximas. Con lo cual cada uso debe llamar una imagen
// con dimensiones adecuadas.
//
// .img-container__is-loading - Añadir/quitar esta clase a la clase padre para
// mostrar/ocultar el estado `loading`.
//
// Markup: image-container.hbs
//
// Styleguide Elements.ImageContainer

.img-container {
  @include element-aspect-ratio;
  background-color: $imgcontainer-bg;
  display: block;
  text-align: center;

  > img,
  a > img {
    bottom: 0;
    left: 0;
    margin: auto;
    max-height: 100%;
    max-width: 100%;
    position: absolute;
    right: 0;
    top: 0;
  }

  &:focus,
  a:focus {
    &,
    > img {
      outline: 0;
    }
  }

  // Estilos especiales para Grid list
  .cell-list-item > & {
    height: $grid-cell-image-size;
    width: $grid-cell-image-size;
    z-index: $zindex-element;
  }

  // Específicos para Ítem box
  .item-box & {
    margin-bottom: $box-item-spacing;
  }

  .item-box:hover & {
    @media only screen and (min-width: $screen-lg-min) {
      animation: item-box__image--mouseOver ($transition-timing-slow / 4) ease-out;
      transform: scale($modifier-scale-value);
    }
  }
}

// State modifiers

.img-container__is-loading {
  // Add background color and z-index to overlay so it will cover the image
  // until state class is removed.
  &::before {
    background-color: $spinner-bg;
    position: relative;
    z-index: $zindex-element;
  }

  // Spinner pseudo-element
  // Hooked on ::after to avoid conflicts: ::before is being used for
  // aspect-ratio in parent class.
  &::after {
    @include make-pseudo-element(inline-block);
    background-image: url(#{$images-url}#{$spinner-element-md});
    height: $spinner-md-size;
    left: 50%;
    margin-left: ($spinner-md-size / 2) * -1;
    margin-top: ($spinner-md-size / 2) * -1;
    position: absolute;
    top: 50%;
    width: $spinner-md-size;
    z-index: $zindex-hover-element;
  }
}
